// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Modoki API": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/modoki-paas/modoki/design
// --out=$(GOPATH)/src/github.com/modoki-paas/modoki
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
	"strconv"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ContainerController is the controller interface for the Container actions.
type ContainerController interface {
	goa.Muxer
	Create(*CreateContainerContext) error
	Download(*DownloadContainerContext) error
	Exec(*ExecContainerContext) error
	GetConfig(*GetConfigContainerContext) error
	Inspect(*InspectContainerContext) error
	List(*ListContainerContext) error
	Logs(*LogsContainerContext) error
	Remove(*RemoveContainerContext) error
	SetConfig(*SetConfigContainerContext) error
	Start(*StartContainerContext) error
	Stop(*StopContainerContext) error
	Upload(*UploadContainerContext) error
}

// MountContainerController "mounts" a Container resource controller on the given service.
func MountContainerController(service *goa.Service, ctrl ContainerController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/create", ctrl.MuxHandler("create", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Create", "route", "GET /api/v2/container/create", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDownloadContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Download(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/download", ctrl.MuxHandler("download", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Download", "route", "GET /api/v2/container/:id/download", "security", "jwt")
	service.Mux.Handle("HEAD", "/api/v2/container/download", ctrl.MuxHandler("download", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Download", "route", "HEAD /api/v2/container/download", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExecContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Exec(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/exec", ctrl.MuxHandler("exec", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Exec", "route", "GET /api/v2/container/:id/exec", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetConfigContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetConfig(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/config", ctrl.MuxHandler("getConfig", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "GetConfig", "route", "GET /api/v2/container/:id/config", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInspectContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Inspect(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/inspect", ctrl.MuxHandler("inspect", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Inspect", "route", "GET /api/v2/container/:id/inspect", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/list", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "List", "route", "GET /api/v2/container/list", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLogsContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Logs(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/logs", ctrl.MuxHandler("logs", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Logs", "route", "GET /api/v2/container/:id/logs", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRemoveContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Remove(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/remove", ctrl.MuxHandler("remove", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Remove", "route", "GET /api/v2/container/:id/remove", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSetConfigContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ContainerConfig)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.SetConfig(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("POST", "/api/v2/container/:id/config", ctrl.MuxHandler("setConfig", h, unmarshalSetConfigContainerPayload))
	service.LogInfo("mount", "ctrl", "Container", "action", "SetConfig", "route", "POST /api/v2/container/:id/config", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/start", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Start", "route", "GET /api/v2/container/:id/start", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStopContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Stop(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/container/:id/stop", ctrl.MuxHandler("stop", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Stop", "route", "GET /api/v2/container/:id/stop", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUploadContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UploadPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Upload(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("POST", "/api/v2/container/:id/upload", ctrl.MuxHandler("upload", h, unmarshalUploadContainerPayload))
	service.LogInfo("mount", "ctrl", "Container", "action", "Upload", "route", "POST /api/v2/container/:id/upload", "security", "jwt")
}

// unmarshalSetConfigContainerPayload unmarshals the request body into the context request data Payload field.
func unmarshalSetConfigContainerPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &containerConfig{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUploadContainerPayload unmarshals the request body into the context request data Payload field.
func unmarshalUploadContainerPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	var err error
	var payload uploadPayload
	rawAllowOverwrite := req.FormValue("allowOverwrite")
	if allowOverwrite, err2 := strconv.ParseBool(rawAllowOverwrite); err2 == nil {
		tmp10 := &allowOverwrite
		payload.AllowOverwrite = tmp10
	} else {
		err = goa.MergeErrors(err, goa.InvalidParamTypeError("allowOverwrite", rawAllowOverwrite, "boolean"))
	}
	rawCopyUIDGID := req.FormValue("copyUIDGID")
	if copyUIDGID, err2 := strconv.ParseBool(rawCopyUIDGID); err2 == nil {
		tmp11 := &copyUIDGID
		payload.CopyUIDGID = tmp11
	} else {
		err = goa.MergeErrors(err, goa.InvalidParamTypeError("copyUIDGID", rawCopyUIDGID, "boolean"))
	}
	_, rawData, err2 := req.FormFile("data")
	if err2 == nil {
		payload.Data = rawData
	} else {
		err = goa.MergeErrors(err, goa.InvalidParamTypeError("data", "data", "file"))
	}
	rawPath := req.FormValue("path")
	payload.Path = &rawPath
	if err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v2/swagger/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/swagger/swagger.yaml", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/api/v2/swagger/swagger.json", "./swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/api/v2/swagger/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "./swagger/swagger.json", "route", "GET /api/v2/swagger/swagger.json")

	h = ctrl.FileHandler("/api/v2/swagger/swagger.yaml", "./swagger/swagger.yaml")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/api/v2/swagger/swagger.yaml", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "./swagger/swagger.yaml", "route", "GET /api/v2/swagger/swagger.yaml")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// UserController is the controller interface for the User actions.
type UserController interface {
	goa.Muxer
	AddAuthorizedKeys(*AddAuthorizedKeysUserContext) error
	GetConfig(*GetConfigUserContext) error
	GetDefaultShell(*GetDefaultShellUserContext) error
	ListAuthorizedKeys(*ListAuthorizedKeysUserContext) error
	RemoveAuthorizedKeys(*RemoveAuthorizedKeysUserContext) error
	SetAuthorizedKeys(*SetAuthorizedKeysUserContext) error
	SetDefaultShell(*SetDefaultShellUserContext) error
}

// MountUserController "mounts" a User resource controller on the given service.
func MountUserController(service *goa.Service, ctrl UserController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddAuthorizedKeysUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UserAuthorizedKey)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.AddAuthorizedKeys(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("PUT", "/api/v2/user/config/authorizedKeys", ctrl.MuxHandler("addAuthorizedKeys", h, unmarshalAddAuthorizedKeysUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "AddAuthorizedKeys", "route", "PUT /api/v2/user/config/authorizedKeys", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetConfigUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetConfig(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/user/config", ctrl.MuxHandler("getConfig", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetConfig", "route", "GET /api/v2/user/config", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetDefaultShellUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetDefaultShell(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/user/config/defaultShell", ctrl.MuxHandler("getDefaultShell", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetDefaultShell", "route", "GET /api/v2/user/config/defaultShell", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAuthorizedKeysUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListAuthorizedKeys(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v2/user/config/authorizedKeys", ctrl.MuxHandler("listAuthorizedKeys", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "ListAuthorizedKeys", "route", "GET /api/v2/user/config/authorizedKeys", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRemoveAuthorizedKeysUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.RemoveAuthorizedKeys(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("DELETE", "/api/v2/user/config/authorizedKeys", ctrl.MuxHandler("removeAuthorizedKeys", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "RemoveAuthorizedKeys", "route", "DELETE /api/v2/user/config/authorizedKeys", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSetAuthorizedKeysUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(SetAuthorizedKeysUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.SetAuthorizedKeys(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("POST", "/api/v2/user/config/authorizedKeys", ctrl.MuxHandler("setAuthorizedKeys", h, unmarshalSetAuthorizedKeysUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "SetAuthorizedKeys", "route", "POST /api/v2/user/config/authorizedKeys", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSetDefaultShellUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.SetDefaultShell(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("POST", "/api/v2/user/config/defaultShell", ctrl.MuxHandler("setDefaultShell", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "SetDefaultShell", "route", "POST /api/v2/user/config/defaultShell", "security", "jwt")
}

// unmarshalAddAuthorizedKeysUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddAuthorizedKeysUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &userAuthorizedKey{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalSetAuthorizedKeysUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalSetAuthorizedKeysUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	var payload SetAuthorizedKeysUserPayload
	if err := service.DecodeRequest(req, &payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload
	return nil
}
