// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Modoki API": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/modoki-paas/modoki/design
// --out=$(GOPATH)/src/github.com/modoki-paas/modoki
// --version=v1.3.1

package app

import (
	"mime/multipart"
	"time"
	"unicode/utf8"

	"github.com/goadesign/goa"
)

// The results of container creation (default view)
//
// Identifier: vnd.application/goa.container.create.results+json; view=default
type GoaContainerCreateResults struct {
	// endpoint URL
	Endpoints []string `form:"endpoints" json:"endpoints" yaml:"endpoints" xml:"endpoints"`
	// container id
	ID int `form:"id" json:"id" yaml:"id" xml:"id"`
}

// Validate validates the GoaContainerCreateResults media type instance.
func (mt *GoaContainerCreateResults) Validate() (err error) {

	if mt.Endpoints == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "endpoints"))
	}
	return
}

// GoaContainerInspectRaw_state media type (default view)
//
// Identifier: vnd.application/goa.container.inspect.raw_state+json; view=default
type GoaContainerInspectRawState struct {
	Dead       bool      `form:"dead" json:"dead" yaml:"dead" xml:"dead"`
	ExitCode   int       `form:"exitCode" json:"exitCode" yaml:"exitCode" xml:"exitCode"`
	FinishedAt time.Time `form:"finishedAt" json:"finishedAt" yaml:"finishedAt" xml:"finishedAt"`
	OomKilled  bool      `form:"oomKilled" json:"oomKilled" yaml:"oomKilled" xml:"oomKilled"`
	Paused     bool      `form:"paused" json:"paused" yaml:"paused" xml:"paused"`
	Pid        int       `form:"pid" json:"pid" yaml:"pid" xml:"pid"`
	Restarting bool      `form:"restarting" json:"restarting" yaml:"restarting" xml:"restarting"`
	Running    bool      `form:"running" json:"running" yaml:"running" xml:"running"`
	StartedAt  time.Time `form:"startedAt" json:"startedAt" yaml:"startedAt" xml:"startedAt"`
	Status     string    `form:"status" json:"status" yaml:"status" xml:"status"`
}

// Validate validates the GoaContainerInspectRawState media type instance.
func (mt *GoaContainerInspectRawState) Validate() (err error) {

	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if !(mt.Status == "created" || mt.Status == "running" || mt.Status == "paused" || mt.Status == "restarting" || mt.Status == "removing" || mt.Status == "exited" || mt.Status == "dead") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, mt.Status, []interface{}{"created", "running", "paused", "restarting", "removing", "exited", "dead"}))
	}
	return
}

// GoaContainerConfig media type (default view)
//
// Identifier: vpn.application/goa.container.config+json; view=default
type GoaContainerConfig struct {
	DefaultShell *string `form:"defaultShell,omitempty" json:"defaultShell,omitempty" yaml:"defaultShell,omitempty" xml:"defaultShell,omitempty"`
}

// GoaContainerDownloadResult media type (default view)
//
// Identifier: vpn.application/goa.container.download.result+json; view=default
type GoaContainerDownloadResult struct {
	File *multipart.FileHeader `form:"file,omitempty" json:"file,omitempty" yaml:"file,omitempty" xml:"file,omitempty"`
}

// GoaContainerInspect media type (default view)
//
// Identifier: vpn.application/goa.container.inspect+json; view=default
type GoaContainerInspect struct {
	// The arguments to the command being run
	Args []string `form:"args" json:"args" yaml:"args" xml:"args"`
	// The time the container was created
	Created time.Time `form:"created" json:"created" yaml:"created" xml:"created"`
	// ID
	ID int `form:"id" json:"id" yaml:"id" xml:"id"`
	// The name of the image to use when creating the container
	Image string `form:"image" json:"image" yaml:"image" xml:"image"`
	// The container's image ID
	ImageID string `form:"imageID" json:"imageID" yaml:"imageID" xml:"imageID"`
	// Assign the specified name to the container. Must match /?[a-zA-Z0-9_-]+.
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// The path to the command being run
	Path     string                       `form:"path" json:"path" yaml:"path" xml:"path"`
	RawState *GoaContainerInspectRawState `form:"raw_state" json:"raw_state" yaml:"raw_state" xml:"raw_state"`
	Status   string                       `form:"status" json:"status" yaml:"status" xml:"status"`
	// Paths to mount volumes in
	Volumes []string `form:"volumes" json:"volumes" yaml:"volumes" xml:"volumes"`
}

// Validate validates the GoaContainerInspect media type instance.
func (mt *GoaContainerInspect) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}

	if mt.Image == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "image"))
	}
	if mt.ImageID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "imageID"))
	}
	if mt.Path == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "path"))
	}
	if mt.Args == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "args"))
	}

	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if mt.RawState == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "raw_state"))
	}
	if mt.Volumes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "volumes"))
	}
	if mt.RawState != nil {
		if err2 := mt.RawState.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(mt.Status == "Image Downloading" || mt.Status == "Created" || mt.Status == "Running" || mt.Status == "Stopped" || mt.Status == "Error") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, mt.Status, []interface{}{"Image Downloading", "Created", "Running", "Stopped", "Error"}))
	}
	return
}

// GoaContainerListEach media type (default view)
//
// Identifier: vpn.application/goa.container.list.each+json; view=default
type GoaContainerListEach struct {
	// Command to run when starting the container
	Command string `form:"command" json:"command" yaml:"command" xml:"command"`
	// The time the container was created
	Created time.Time `form:"created" json:"created" yaml:"created" xml:"created"`
	// ID
	ID int `form:"id" json:"id" yaml:"id" xml:"id"`
	// The name of the image to use when creating the container
	Image string `form:"image" json:"image" yaml:"image" xml:"image"`
	// The container's image ID
	ImageID string `form:"imageID" json:"imageID" yaml:"imageID" xml:"imageID"`
	// Assign the specified name to the container. Must match /?[a-zA-Z0-9_-]+.
	Name   string `form:"name" json:"name" yaml:"name" xml:"name"`
	Status string `form:"status" json:"status" yaml:"status" xml:"status"`
	// Paths to mount volumes in
	Volumes []string `form:"volumes" json:"volumes" yaml:"volumes" xml:"volumes"`
}

// Validate validates the GoaContainerListEach media type instance.
func (mt *GoaContainerListEach) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}

	if mt.Image == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "image"))
	}
	if mt.ImageID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "imageID"))
	}
	if mt.Command == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "command"))
	}

	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if mt.Volumes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "volumes"))
	}
	if !(mt.Status == "Creating" || mt.Status == "Created" || mt.Status == "Running" || mt.Status == "Stopped" || mt.Status == "Error") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, mt.Status, []interface{}{"Creating", "Created", "Running", "Stopped", "Error"}))
	}
	return
}

// GoaContainerListEachCollection is the media type for an array of GoaContainerListEach (default view)
//
// Identifier: vpn.application/goa.container.list.each+json; type=collection; view=default
type GoaContainerListEachCollection []*GoaContainerListEach

// Validate validates the GoaContainerListEachCollection media type instance.
func (mt GoaContainerListEachCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// GoaUserApikey media type (default view)
//
// Identifier: vpn.application/goa.user.apikey; view=default
type GoaUserApikey struct {
	Key string `form:"key" json:"key" yaml:"key" xml:"key"`
}

// Validate validates the GoaUserApikey media type instance.
func (mt *GoaUserApikey) Validate() (err error) {
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	return
}

// GoaUserAuthorizedkey media type (default view)
//
// Identifier: vpn.application/goa.user.authorizedkey+json; view=default
type GoaUserAuthorizedkey struct {
	Key   string `form:"key" json:"key" yaml:"key" xml:"key"`
	Label string `form:"label" json:"label" yaml:"label" xml:"label"`
}

// Validate validates the GoaUserAuthorizedkey media type instance.
func (mt *GoaUserAuthorizedkey) Validate() (err error) {
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	if mt.Label == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "label"))
	}
	if utf8.RuneCountInString(mt.Key) > 2048 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.key`, mt.Key, utf8.RuneCountInString(mt.Key), 2048, false))
	}
	if ok := goa.ValidatePattern(`^[a-zA-Z0-9_]+$`, mt.Label); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.label`, mt.Label, `^[a-zA-Z0-9_]+$`))
	}
	if utf8.RuneCountInString(mt.Label) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.label`, mt.Label, utf8.RuneCountInString(mt.Label), 1, true))
	}
	if utf8.RuneCountInString(mt.Label) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.label`, mt.Label, utf8.RuneCountInString(mt.Label), 32, false))
	}
	return
}

// GoaUserAuthorizedkeyCollection is the media type for an array of GoaUserAuthorizedkey (default view)
//
// Identifier: vpn.application/goa.user.authorizedkey+json; type=collection; view=default
type GoaUserAuthorizedkeyCollection []*GoaUserAuthorizedkey

// Validate validates the GoaUserAuthorizedkeyCollection media type instance.
func (mt GoaUserAuthorizedkeyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// GoaUserConfig media type (default view)
//
// Identifier: vpn.application/goa.user.config+json; view=default
type GoaUserConfig struct {
	AuthorizedKeys GoaUserAuthorizedkeyCollection `form:"authorizedKeys" json:"authorizedKeys" yaml:"authorizedKeys" xml:"authorizedKeys"`
	DefaultShell   string                         `form:"defaultShell" json:"defaultShell" yaml:"defaultShell" xml:"defaultShell"`
}

// Validate validates the GoaUserConfig media type instance.
func (mt *GoaUserConfig) Validate() (err error) {
	if mt.DefaultShell == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "defaultShell"))
	}
	if mt.AuthorizedKeys == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "authorizedKeys"))
	}
	if err2 := mt.AuthorizedKeys.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// GoaUserDefaultshell media type (default view)
//
// Identifier: vpn.application/goa.user.defaultshell+json; view=default
type GoaUserDefaultshell struct {
	DefaultShell string `form:"defaultShell" json:"defaultShell" yaml:"defaultShell" xml:"defaultShell"`
}

// Validate validates the GoaUserDefaultshell media type instance.
func (mt *GoaUserDefaultshell) Validate() (err error) {
	if mt.DefaultShell == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "defaultShell"))
	}
	return
}
