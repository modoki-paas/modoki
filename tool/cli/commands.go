// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Modoki API": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/modoki-paas/modoki/design
// --out=$(GOPATH)/src/github.com/modoki-paas/modoki
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/modoki-paas/modoki/client"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateContainerForAPICommand is the command line data structure for the create action of containerForApi
	CreateContainerForAPICommand struct {
		// Command to run specified as a string or an array of strings.
		Command []string
		// The entry point for the container as a string or an array of strings
		Entrypoint []string
		// Environment variables
		Env []string
		// Name of image
		Image string
		// Name of container and subdomain
		Name string
		// Whether HTTP is redirected to HTTPS
		SslRedirect string
		// Path to volumes in a container
		Volumes []string
		// Current directory (PWD) in the command will be launched
		WorkingDir  string
		PrettyPrint bool
	}

	// DownloadContainerForAPICommand is the command line data structure for the download action of containerForApi
	DownloadContainerForAPICommand struct {
		// ID or name
		ID string
		// Path in the container to save files
		InternalPath string
		PrettyPrint  bool
	}

	// ExecContainerForAPICommand is the command line data structure for the exec action of containerForApi
	ExecContainerForAPICommand struct {
		// id or name
		ID string
		// The path to the executable file
		Command []string
		// Tty
		Tty         string
		PrettyPrint bool
	}

	// GetConfigContainerForAPICommand is the command line data structure for the getConfig action of containerForApi
	GetConfigContainerForAPICommand struct {
		// id or name
		ID          string
		PrettyPrint bool
	}

	// InspectContainerForAPICommand is the command line data structure for the inspect action of containerForApi
	InspectContainerForAPICommand struct {
		// ID or name
		ID          string
		PrettyPrint bool
	}

	// ListContainerForAPICommand is the command line data structure for the list action of containerForApi
	ListContainerForAPICommand struct {
		PrettyPrint bool
	}

	// LogsContainerForAPICommand is the command line data structure for the logs action of containerForApi
	LogsContainerForAPICommand struct {
		// id or name
		ID          string
		Follow      string
		Since       string
		Stderr      string
		Stdout      string
		Tail        string
		Timestamps  string
		Until       string
		PrettyPrint bool
	}

	// RemoveContainerForAPICommand is the command line data structure for the remove action of containerForApi
	RemoveContainerForAPICommand struct {
		// id or name
		ID string
		// If the container is running, kill it before removing it.
		Force       string
		PrettyPrint bool
	}

	// SetConfigContainerForAPICommand is the command line data structure for the setConfig action of containerForApi
	SetConfigContainerForAPICommand struct {
		Payload     string
		ContentType string
		// id or name
		ID          string
		PrettyPrint bool
	}

	// StartContainerForAPICommand is the command line data structure for the start action of containerForApi
	StartContainerForAPICommand struct {
		// id or name
		ID          string
		PrettyPrint bool
	}

	// StopContainerForAPICommand is the command line data structure for the stop action of containerForApi
	StopContainerForAPICommand struct {
		// id or name
		ID          string
		PrettyPrint bool
	}

	// UploadContainerForAPICommand is the command line data structure for the upload action of containerForApi
	UploadContainerForAPICommand struct {
		Payload     string
		ContentType string
		// ID or name
		ID          string
		PrettyPrint bool
	}

	// CreateContainerForFrontendCommand is the command line data structure for the create action of containerForFrontend
	CreateContainerForFrontendCommand struct {
		// Command to run specified as a string or an array of strings.
		Command []string
		// The entry point for the container as a string or an array of strings
		Entrypoint []string
		// Environment variables
		Env []string
		// Name of image
		Image string
		// Name of container and subdomain
		Name string
		// Whether HTTP is redirected to HTTPS
		SslRedirect string
		// Path to volumes in a container
		Volumes []string
		// Current directory (PWD) in the command will be launched
		WorkingDir  string
		PrettyPrint bool
	}

	// DownloadContainerForFrontendCommand is the command line data structure for the download action of containerForFrontend
	DownloadContainerForFrontendCommand struct {
		// ID or name
		ID string
		// Path in the container to save files
		InternalPath string
		PrettyPrint  bool
	}

	// ExecContainerForFrontendCommand is the command line data structure for the exec action of containerForFrontend
	ExecContainerForFrontendCommand struct {
		// id or name
		ID string
		// The path to the executable file
		Command []string
		// Tty
		Tty         string
		PrettyPrint bool
	}

	// GetConfigContainerForFrontendCommand is the command line data structure for the getConfig action of containerForFrontend
	GetConfigContainerForFrontendCommand struct {
		// id or name
		ID          string
		PrettyPrint bool
	}

	// InspectContainerForFrontendCommand is the command line data structure for the inspect action of containerForFrontend
	InspectContainerForFrontendCommand struct {
		// ID or name
		ID          string
		PrettyPrint bool
	}

	// ListContainerForFrontendCommand is the command line data structure for the list action of containerForFrontend
	ListContainerForFrontendCommand struct {
		PrettyPrint bool
	}

	// LogsContainerForFrontendCommand is the command line data structure for the logs action of containerForFrontend
	LogsContainerForFrontendCommand struct {
		// id or name
		ID          string
		Follow      string
		Since       string
		Stderr      string
		Stdout      string
		Tail        string
		Timestamps  string
		Until       string
		PrettyPrint bool
	}

	// RemoveContainerForFrontendCommand is the command line data structure for the remove action of containerForFrontend
	RemoveContainerForFrontendCommand struct {
		// id or name
		ID string
		// If the container is running, kill it before removing it.
		Force       string
		PrettyPrint bool
	}

	// SetConfigContainerForFrontendCommand is the command line data structure for the setConfig action of containerForFrontend
	SetConfigContainerForFrontendCommand struct {
		Payload     string
		ContentType string
		// id or name
		ID          string
		PrettyPrint bool
	}

	// StartContainerForFrontendCommand is the command line data structure for the start action of containerForFrontend
	StartContainerForFrontendCommand struct {
		// id or name
		ID          string
		PrettyPrint bool
	}

	// StopContainerForFrontendCommand is the command line data structure for the stop action of containerForFrontend
	StopContainerForFrontendCommand struct {
		// id or name
		ID          string
		PrettyPrint bool
	}

	// UploadContainerForFrontendCommand is the command line data structure for the upload action of containerForFrontend
	UploadContainerForFrontendCommand struct {
		Payload     string
		ContentType string
		// ID or name
		ID          string
		PrettyPrint bool
	}

	// AddAuthorizedKeysUserForAPICommand is the command line data structure for the addAuthorizedKeys action of userForApi
	AddAuthorizedKeysUserForAPICommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetConfigUserForAPICommand is the command line data structure for the getConfig action of userForApi
	GetConfigUserForAPICommand struct {
		PrettyPrint bool
	}

	// GetDefaultShellUserForAPICommand is the command line data structure for the getDefaultShell action of userForApi
	GetDefaultShellUserForAPICommand struct {
		PrettyPrint bool
	}

	// ListAuthorizedKeysUserForAPICommand is the command line data structure for the listAuthorizedKeys action of userForApi
	ListAuthorizedKeysUserForAPICommand struct {
		PrettyPrint bool
	}

	// RemoveAuthorizedKeysUserForAPICommand is the command line data structure for the removeAuthorizedKeys action of userForApi
	RemoveAuthorizedKeysUserForAPICommand struct {
		Label       string
		PrettyPrint bool
	}

	// SetAuthorizedKeysUserForAPICommand is the command line data structure for the setAuthorizedKeys action of userForApi
	SetAuthorizedKeysUserForAPICommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// SetDefaultShellUserForAPICommand is the command line data structure for the setDefaultShell action of userForApi
	SetDefaultShellUserForAPICommand struct {
		DefaultShell string
		PrettyPrint  bool
	}

	// AddAuthorizedKeysUserForFrontendCommand is the command line data structure for the addAuthorizedKeys action of userForFrontend
	AddAuthorizedKeysUserForFrontendCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetAPIKeyUserForFrontendCommand is the command line data structure for the getAPIKey action of userForFrontend
	GetAPIKeyUserForFrontendCommand struct {
		PrettyPrint bool
	}

	// GetConfigUserForFrontendCommand is the command line data structure for the getConfig action of userForFrontend
	GetConfigUserForFrontendCommand struct {
		PrettyPrint bool
	}

	// GetDefaultShellUserForFrontendCommand is the command line data structure for the getDefaultShell action of userForFrontend
	GetDefaultShellUserForFrontendCommand struct {
		PrettyPrint bool
	}

	// ListAuthorizedKeysUserForFrontendCommand is the command line data structure for the listAuthorizedKeys action of userForFrontend
	ListAuthorizedKeysUserForFrontendCommand struct {
		PrettyPrint bool
	}

	// ReissueAPIKeyUserForFrontendCommand is the command line data structure for the reissueAPIKey action of userForFrontend
	ReissueAPIKeyUserForFrontendCommand struct {
		PrettyPrint bool
	}

	// RemoveAuthorizedKeysUserForFrontendCommand is the command line data structure for the removeAuthorizedKeys action of userForFrontend
	RemoveAuthorizedKeysUserForFrontendCommand struct {
		Label       string
		PrettyPrint bool
	}

	// SetAuthorizedKeysUserForFrontendCommand is the command line data structure for the setAuthorizedKeys action of userForFrontend
	SetAuthorizedKeysUserForFrontendCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// SetDefaultShellUserForFrontendCommand is the command line data structure for the setDefaultShell action of userForFrontend
	SetDefaultShellUserForFrontendCommand struct {
		DefaultShell string
		PrettyPrint  bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add-authorized-keys",
		Short: `addAuthorizedKeys action`,
	}
	tmp1 := new(AddAuthorizedKeysUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config/authorizedKeys"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "4p5w7j6dvb",
   "label": "i5hmg"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(AddAuthorizedKeysUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config/authorizedKeys"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "4p5w7j6dvb",
   "label": "i5hmg"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp3 := new(CreateContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/create"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(CreateContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/create"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "download",
		Short: `download action`,
	}
	tmp5 := new(DownloadContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api [("/api/v2/container/ID/download"|"/api/v2/container/download")]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(DownloadContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend [("/frontend/v2/container/ID/download"|"/frontend/v2/container/download")]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "exec",
		Short: `exec action`,
	}
	tmp7 := new(ExecContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/exec"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(ExecContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/exec"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "getapi-key",
		Short: ``,
	}
	tmp9 := new(GetAPIKeyUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/apiKey"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-config",
		Short: `getConfig action`,
	}
	tmp10 := new(GetConfigContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/config"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp11 := new(GetConfigContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/config"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp12 := new(GetConfigUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp13 := new(GetConfigUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-default-shell",
		Short: `getDefaultShell action`,
	}
	tmp14 := new(GetDefaultShellUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config/defaultShell"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp15 := new(GetDefaultShellUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config/defaultShell"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "inspect",
		Short: `inspect action`,
	}
	tmp16 := new(InspectContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/inspect"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp17 := new(InspectContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/inspect"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp18 := new(ListContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/list"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp19 := new(ListContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/list"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-authorized-keys",
		Short: `listAuthorizedKeys action`,
	}
	tmp20 := new(ListAuthorizedKeysUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config/authorizedKeys"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp21 := new(ListAuthorizedKeysUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config/authorizedKeys"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logs",
		Short: `logs action`,
	}
	tmp22 := new(LogsContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/logs"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp23 := new(LogsContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/logs"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "reissueapi-key",
		Short: ``,
	}
	tmp24 := new(ReissueAPIKeyUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/apiKey"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove",
		Short: `remove action`,
	}
	tmp25 := new(RemoveContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/remove"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp26 := new(RemoveContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/remove"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-authorized-keys",
		Short: `removeAuthorizedKeys action`,
	}
	tmp27 := new(RemoveAuthorizedKeysUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config/authorizedKeys"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp28 := new(RemoveAuthorizedKeysUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config/authorizedKeys"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "set-authorized-keys",
		Short: `setAuthorizedKeys action`,
	}
	tmp29 := new(SetAuthorizedKeysUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config/authorizedKeys"]`,
		Short: ``,
		Long: `

Payload example:

[
   {
      "key": "4p5w7j6dvb",
      "label": "i5hmg"
   },
   {
      "key": "4p5w7j6dvb",
      "label": "i5hmg"
   },
   {
      "key": "4p5w7j6dvb",
      "label": "i5hmg"
   }
]`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp30 := new(SetAuthorizedKeysUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config/authorizedKeys"]`,
		Short: ``,
		Long: `

Payload example:

[
   {
      "key": "4p5w7j6dvb",
      "label": "i5hmg"
   },
   {
      "key": "4p5w7j6dvb",
      "label": "i5hmg"
   },
   {
      "key": "4p5w7j6dvb",
      "label": "i5hmg"
   }
]`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "set-config",
		Short: `setConfig action`,
	}
	tmp31 := new(SetConfigContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/config"]`,
		Short: ``,
		Long: `

Payload example:

{
   "defaultShell": "Ut laudantium fugit aut officia."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp32 := new(SetConfigContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/config"]`,
		Short: ``,
		Long: `

Payload example:

{
   "defaultShell": "Ut laudantium fugit aut officia."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "set-default-shell",
		Short: `setDefaultShell action`,
	}
	tmp33 := new(SetDefaultShellUserForAPICommand)
	sub = &cobra.Command{
		Use:   `user-for-api ["/api/v2/user/config/defaultShell"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(SetDefaultShellUserForFrontendCommand)
	sub = &cobra.Command{
		Use:   `user-for-frontend ["/frontend/v2/user/config/defaultShell"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "start",
		Short: `start action`,
	}
	tmp35 := new(StartContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp35.Run(c, args) },
	}
	tmp35.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp35.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp36 := new(StartContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp36.Run(c, args) },
	}
	tmp36.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp36.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "stop",
		Short: `stop action`,
	}
	tmp37 := new(StopContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/stop"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp37.Run(c, args) },
	}
	tmp37.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp37.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp38 := new(StopContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/stop"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp38.Run(c, args) },
	}
	tmp38.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp38.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "upload",
		Short: `upload action`,
	}
	tmp39 := new(UploadContainerForAPICommand)
	sub = &cobra.Command{
		Use:   `container-for-api ["/api/v2/container/ID/upload"]`,
		Short: ``,
		Long: `

Payload example:

{
   "allowOverwrite": true,
   "copyUIDGID": false,
   "data": "Et nostrum quo aut recusandae.jpg",
   "path": "Totam et dolores."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp39.Run(c, args) },
	}
	tmp39.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp39.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp40 := new(UploadContainerForFrontendCommand)
	sub = &cobra.Command{
		Use:   `container-for-frontend ["/frontend/v2/container/ID/upload"]`,
		Short: ``,
		Long: `

Payload example:

{
   "allowOverwrite": true,
   "copyUIDGID": false,
   "data": "Et nostrum quo aut recusandae.jpg",
   "path": "Totam et dolores."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp40.Run(c, args) },
	}
	tmp40.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp40.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/api/v2/swagger/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/frontend/v2/swagger/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/api/v2/swagger/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	if rpath == "/frontend/v2/swagger/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the CreateContainerForAPICommand command.
func (cmd *CreateContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/container/create"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp41 *bool
	if cmd.SslRedirect != "" {
		var err error
		tmp41, err = boolVal(cmd.SslRedirect)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--sslRedirect", "err", err)
			return err
		}
	}
	resp, err := c.CreateContainerForAPI(ctx, path, cmd.Image, cmd.Name, cmd.Command, cmd.Entrypoint, cmd.Env, tmp41, cmd.Volumes, stringFlagVal("workingDir", cmd.WorkingDir))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var command []string
	cc.Flags().StringSliceVar(&cmd.Command, "command", command, `Command to run specified as a string or an array of strings.`)
	var entrypoint []string
	cc.Flags().StringSliceVar(&cmd.Entrypoint, "entrypoint", entrypoint, `The entry point for the container as a string or an array of strings`)
	var env []string
	cc.Flags().StringSliceVar(&cmd.Env, "env", env, `Environment variables`)
	var image string
	cc.Flags().StringVar(&cmd.Image, "image", image, `Name of image`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `Name of container and subdomain`)
	cc.Flags().StringVar(&cmd.SslRedirect, "sslRedirect", "true", `Whether HTTP is redirected to HTTPS`)
	var volumes []string
	cc.Flags().StringSliceVar(&cmd.Volumes, "volumes", volumes, `Path to volumes in a container`)
	var workingDir string
	cc.Flags().StringVar(&cmd.WorkingDir, "workingDir", workingDir, `Current directory (PWD) in the command will be launched`)
}

// Run makes the HTTP request corresponding to the DownloadContainerForAPICommand command.
func (cmd *DownloadContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/container/download"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownloadContainerForAPI(ctx, path, cmd.InternalPath)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownloadContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID or name`)
	var internalPath string
	cc.Flags().StringVar(&cmd.InternalPath, "internalPath", internalPath, `Path in the container to save files`)
}

// Run establishes a websocket connection for the ExecContainerForAPICommand command.
func (cmd *ExecContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/exec", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp42 *bool
	if cmd.Tty != "" {
		var err error
		tmp42, err = boolVal(cmd.Tty)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--tty", "err", err)
			return err
		}
	}
	ws, err := c.ExecContainerForAPI(ctx, path, cmd.Command, tmp42)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ExecContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
	var command []string
	cc.Flags().StringSliceVar(&cmd.Command, "command", command, `The path to the executable file`)
	var tty string
	cc.Flags().StringVar(&cmd.Tty, "tty", tty, `Tty`)
}

// Run makes the HTTP request corresponding to the GetConfigContainerForAPICommand command.
func (cmd *GetConfigContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/config", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetConfigContainerForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetConfigContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the InspectContainerForAPICommand command.
func (cmd *InspectContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/inspect", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.InspectContainerForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *InspectContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID or name`)
}

// Run makes the HTTP request corresponding to the ListContainerForAPICommand command.
func (cmd *ListContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/container/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListContainerForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run establishes a websocket connection for the LogsContainerForAPICommand command.
func (cmd *LogsContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/logs", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp43 *bool
	if cmd.Follow != "" {
		var err error
		tmp43, err = boolVal(cmd.Follow)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--follow", "err", err)
			return err
		}
	}
	var tmp44 *time.Time
	if cmd.Since != "" {
		var err error
		tmp44, err = timeVal(cmd.Since)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--since", "err", err)
			return err
		}
	}
	var tmp45 *bool
	if cmd.Stderr != "" {
		var err error
		tmp45, err = boolVal(cmd.Stderr)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--stderr", "err", err)
			return err
		}
	}
	var tmp46 *bool
	if cmd.Stdout != "" {
		var err error
		tmp46, err = boolVal(cmd.Stdout)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--stdout", "err", err)
			return err
		}
	}
	var tmp47 *bool
	if cmd.Timestamps != "" {
		var err error
		tmp47, err = boolVal(cmd.Timestamps)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--timestamps", "err", err)
			return err
		}
	}
	var tmp48 *time.Time
	if cmd.Until != "" {
		var err error
		tmp48, err = timeVal(cmd.Until)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--until", "err", err)
			return err
		}
	}
	ws, err := c.LogsContainerForAPI(ctx, path, tmp43, tmp44, tmp45, tmp46, stringFlagVal("tail", cmd.Tail), tmp47, tmp48)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogsContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
	var follow string
	cc.Flags().StringVar(&cmd.Follow, "follow", follow, ``)
	var since string
	cc.Flags().StringVar(&cmd.Since, "since", since, ``)
	var stderr string
	cc.Flags().StringVar(&cmd.Stderr, "stderr", stderr, ``)
	var stdout string
	cc.Flags().StringVar(&cmd.Stdout, "stdout", stdout, ``)
	cc.Flags().StringVar(&cmd.Tail, "tail", "all", ``)
	var timestamps string
	cc.Flags().StringVar(&cmd.Timestamps, "timestamps", timestamps, ``)
	var until string
	cc.Flags().StringVar(&cmd.Until, "until", until, ``)
}

// Run makes the HTTP request corresponding to the RemoveContainerForAPICommand command.
func (cmd *RemoveContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/remove", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp49 *bool
	if cmd.Force != "" {
		var err error
		tmp49, err = boolVal(cmd.Force)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--force", "err", err)
			return err
		}
	}
	if tmp49 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--force")
		return fmt.Errorf("required flag force is missing")
	}
	resp, err := c.RemoveContainerForAPI(ctx, path, *tmp49)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
	var force string
	cc.Flags().StringVar(&cmd.Force, "force", force, `If the container is running, kill it before removing it.`)
}

// Run makes the HTTP request corresponding to the SetConfigContainerForAPICommand command.
func (cmd *SetConfigContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/config", url.QueryEscape(cmd.ID))
	}
	var payload client.ContainerConfig
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SetConfigContainerForAPI(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SetConfigContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the StartContainerForAPICommand command.
func (cmd *StartContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/start", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StartContainerForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StartContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the StopContainerForAPICommand command.
func (cmd *StopContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/stop", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StopContainerForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StopContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the UploadContainerForAPICommand command.
func (cmd *UploadContainerForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v2/container/%v/upload", url.QueryEscape(cmd.ID))
	}
	var payload client.UploadPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UploadContainerForAPI(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UploadContainerForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID or name`)
}

// Run makes the HTTP request corresponding to the CreateContainerForFrontendCommand command.
func (cmd *CreateContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/container/create"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp50 *bool
	if cmd.SslRedirect != "" {
		var err error
		tmp50, err = boolVal(cmd.SslRedirect)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--sslRedirect", "err", err)
			return err
		}
	}
	resp, err := c.CreateContainerForFrontend(ctx, path, cmd.Image, cmd.Name, cmd.Command, cmd.Entrypoint, cmd.Env, tmp50, cmd.Volumes, stringFlagVal("workingDir", cmd.WorkingDir))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var command []string
	cc.Flags().StringSliceVar(&cmd.Command, "command", command, `Command to run specified as a string or an array of strings.`)
	var entrypoint []string
	cc.Flags().StringSliceVar(&cmd.Entrypoint, "entrypoint", entrypoint, `The entry point for the container as a string or an array of strings`)
	var env []string
	cc.Flags().StringSliceVar(&cmd.Env, "env", env, `Environment variables`)
	var image string
	cc.Flags().StringVar(&cmd.Image, "image", image, `Name of image`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `Name of container and subdomain`)
	cc.Flags().StringVar(&cmd.SslRedirect, "sslRedirect", "true", `Whether HTTP is redirected to HTTPS`)
	var volumes []string
	cc.Flags().StringSliceVar(&cmd.Volumes, "volumes", volumes, `Path to volumes in a container`)
	var workingDir string
	cc.Flags().StringVar(&cmd.WorkingDir, "workingDir", workingDir, `Current directory (PWD) in the command will be launched`)
}

// Run makes the HTTP request corresponding to the DownloadContainerForFrontendCommand command.
func (cmd *DownloadContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/container/download"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownloadContainerForFrontend(ctx, path, cmd.InternalPath)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownloadContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID or name`)
	var internalPath string
	cc.Flags().StringVar(&cmd.InternalPath, "internalPath", internalPath, `Path in the container to save files`)
}

// Run establishes a websocket connection for the ExecContainerForFrontendCommand command.
func (cmd *ExecContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/exec", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp51 *bool
	if cmd.Tty != "" {
		var err error
		tmp51, err = boolVal(cmd.Tty)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--tty", "err", err)
			return err
		}
	}
	ws, err := c.ExecContainerForFrontend(ctx, path, cmd.Command, tmp51)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ExecContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
	var command []string
	cc.Flags().StringSliceVar(&cmd.Command, "command", command, `The path to the executable file`)
	var tty string
	cc.Flags().StringVar(&cmd.Tty, "tty", tty, `Tty`)
}

// Run makes the HTTP request corresponding to the GetConfigContainerForFrontendCommand command.
func (cmd *GetConfigContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/config", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetConfigContainerForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetConfigContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the InspectContainerForFrontendCommand command.
func (cmd *InspectContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/inspect", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.InspectContainerForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *InspectContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID or name`)
}

// Run makes the HTTP request corresponding to the ListContainerForFrontendCommand command.
func (cmd *ListContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/container/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListContainerForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run establishes a websocket connection for the LogsContainerForFrontendCommand command.
func (cmd *LogsContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/logs", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp52 *bool
	if cmd.Follow != "" {
		var err error
		tmp52, err = boolVal(cmd.Follow)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--follow", "err", err)
			return err
		}
	}
	var tmp53 *time.Time
	if cmd.Since != "" {
		var err error
		tmp53, err = timeVal(cmd.Since)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--since", "err", err)
			return err
		}
	}
	var tmp54 *bool
	if cmd.Stderr != "" {
		var err error
		tmp54, err = boolVal(cmd.Stderr)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--stderr", "err", err)
			return err
		}
	}
	var tmp55 *bool
	if cmd.Stdout != "" {
		var err error
		tmp55, err = boolVal(cmd.Stdout)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--stdout", "err", err)
			return err
		}
	}
	var tmp56 *bool
	if cmd.Timestamps != "" {
		var err error
		tmp56, err = boolVal(cmd.Timestamps)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--timestamps", "err", err)
			return err
		}
	}
	var tmp57 *time.Time
	if cmd.Until != "" {
		var err error
		tmp57, err = timeVal(cmd.Until)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--until", "err", err)
			return err
		}
	}
	ws, err := c.LogsContainerForFrontend(ctx, path, tmp52, tmp53, tmp54, tmp55, stringFlagVal("tail", cmd.Tail), tmp56, tmp57)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogsContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
	var follow string
	cc.Flags().StringVar(&cmd.Follow, "follow", follow, ``)
	var since string
	cc.Flags().StringVar(&cmd.Since, "since", since, ``)
	var stderr string
	cc.Flags().StringVar(&cmd.Stderr, "stderr", stderr, ``)
	var stdout string
	cc.Flags().StringVar(&cmd.Stdout, "stdout", stdout, ``)
	cc.Flags().StringVar(&cmd.Tail, "tail", "all", ``)
	var timestamps string
	cc.Flags().StringVar(&cmd.Timestamps, "timestamps", timestamps, ``)
	var until string
	cc.Flags().StringVar(&cmd.Until, "until", until, ``)
}

// Run makes the HTTP request corresponding to the RemoveContainerForFrontendCommand command.
func (cmd *RemoveContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/remove", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp58 *bool
	if cmd.Force != "" {
		var err error
		tmp58, err = boolVal(cmd.Force)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--force", "err", err)
			return err
		}
	}
	if tmp58 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--force")
		return fmt.Errorf("required flag force is missing")
	}
	resp, err := c.RemoveContainerForFrontend(ctx, path, *tmp58)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
	var force string
	cc.Flags().StringVar(&cmd.Force, "force", force, `If the container is running, kill it before removing it.`)
}

// Run makes the HTTP request corresponding to the SetConfigContainerForFrontendCommand command.
func (cmd *SetConfigContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/config", url.QueryEscape(cmd.ID))
	}
	var payload client.ContainerConfig
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SetConfigContainerForFrontend(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SetConfigContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the StartContainerForFrontendCommand command.
func (cmd *StartContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/start", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StartContainerForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StartContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the StopContainerForFrontendCommand command.
func (cmd *StopContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/stop", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StopContainerForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StopContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id or name`)
}

// Run makes the HTTP request corresponding to the UploadContainerForFrontendCommand command.
func (cmd *UploadContainerForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/frontend/v2/container/%v/upload", url.QueryEscape(cmd.ID))
	}
	var payload client.UploadPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UploadContainerForFrontend(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UploadContainerForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID or name`)
}

// Run makes the HTTP request corresponding to the AddAuthorizedKeysUserForAPICommand command.
func (cmd *AddAuthorizedKeysUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config/authorizedKeys"
	}
	var payload client.UserAuthorizedKey
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAuthorizedKeysUserForAPI(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAuthorizedKeysUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetConfigUserForAPICommand command.
func (cmd *GetConfigUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetConfigUserForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetConfigUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetDefaultShellUserForAPICommand command.
func (cmd *GetDefaultShellUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config/defaultShell"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetDefaultShellUserForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetDefaultShellUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListAuthorizedKeysUserForAPICommand command.
func (cmd *ListAuthorizedKeysUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config/authorizedKeys"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAuthorizedKeysUserForAPI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAuthorizedKeysUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RemoveAuthorizedKeysUserForAPICommand command.
func (cmd *RemoveAuthorizedKeysUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config/authorizedKeys"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveAuthorizedKeysUserForAPI(ctx, path, cmd.Label)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveAuthorizedKeysUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var label string
	cc.Flags().StringVar(&cmd.Label, "label", label, ``)
}

// Run makes the HTTP request corresponding to the SetAuthorizedKeysUserForAPICommand command.
func (cmd *SetAuthorizedKeysUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config/authorizedKeys"
	}
	var payload client.SetAuthorizedKeysUserForAPIPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SetAuthorizedKeysUserForAPI(ctx, path, payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SetAuthorizedKeysUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the SetDefaultShellUserForAPICommand command.
func (cmd *SetDefaultShellUserForAPICommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v2/user/config/defaultShell"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SetDefaultShellUserForAPI(ctx, path, cmd.DefaultShell)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SetDefaultShellUserForAPICommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var defaultShell string
	cc.Flags().StringVar(&cmd.DefaultShell, "defaultShell", defaultShell, ``)
}

// Run makes the HTTP request corresponding to the AddAuthorizedKeysUserForFrontendCommand command.
func (cmd *AddAuthorizedKeysUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config/authorizedKeys"
	}
	var payload client.UserAuthorizedKey
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAuthorizedKeysUserForFrontend(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAuthorizedKeysUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetAPIKeyUserForFrontendCommand command.
func (cmd *GetAPIKeyUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/apiKey"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAPIKeyUserForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAPIKeyUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetConfigUserForFrontendCommand command.
func (cmd *GetConfigUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetConfigUserForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetConfigUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetDefaultShellUserForFrontendCommand command.
func (cmd *GetDefaultShellUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config/defaultShell"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetDefaultShellUserForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetDefaultShellUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListAuthorizedKeysUserForFrontendCommand command.
func (cmd *ListAuthorizedKeysUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config/authorizedKeys"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAuthorizedKeysUserForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAuthorizedKeysUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ReissueAPIKeyUserForFrontendCommand command.
func (cmd *ReissueAPIKeyUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/apiKey"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ReissueAPIKeyUserForFrontend(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReissueAPIKeyUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RemoveAuthorizedKeysUserForFrontendCommand command.
func (cmd *RemoveAuthorizedKeysUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config/authorizedKeys"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveAuthorizedKeysUserForFrontend(ctx, path, cmd.Label)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveAuthorizedKeysUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var label string
	cc.Flags().StringVar(&cmd.Label, "label", label, ``)
}

// Run makes the HTTP request corresponding to the SetAuthorizedKeysUserForFrontendCommand command.
func (cmd *SetAuthorizedKeysUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config/authorizedKeys"
	}
	var payload client.SetAuthorizedKeysUserForFrontendPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SetAuthorizedKeysUserForFrontend(ctx, path, payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SetAuthorizedKeysUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the SetDefaultShellUserForFrontendCommand command.
func (cmd *SetDefaultShellUserForFrontendCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/frontend/v2/user/config/defaultShell"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SetDefaultShellUserForFrontend(ctx, path, cmd.DefaultShell)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SetDefaultShellUserForFrontendCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var defaultShell string
	cc.Flags().StringVar(&cmd.DefaultShell, "defaultShell", defaultShell, ``)
}
