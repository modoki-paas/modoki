// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Modoki API": user Resource Client
//
// Command:
// $ goagen
// --design=github.com/modoki-paas/modoki/design
// --out=$(GOPATH)/src/github.com/modoki-paas/modoki
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AddAuthorizedKeysUserPath computes a request path to the addAuthorizedKeys action of user.
func AddAuthorizedKeysUserPath() string {

	return fmt.Sprintf("/api/v2/user/config/authorizedKeys")
}

// AddAuthorizedKeysUser makes a request to the addAuthorizedKeys action endpoint of the user resource
func (c *Client) AddAuthorizedKeysUser(ctx context.Context, path string, payload *UserAuthorizedKey, contentType string) (*http.Response, error) {
	req, err := c.NewAddAuthorizedKeysUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddAuthorizedKeysUserRequest create the request corresponding to the addAuthorizedKeys action endpoint of the user resource.
func (c *Client) NewAddAuthorizedKeysUserRequest(ctx context.Context, path string, payload *UserAuthorizedKey, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetConfigUserPath computes a request path to the getConfig action of user.
func GetConfigUserPath() string {

	return fmt.Sprintf("/api/v2/user/config")
}

// GetConfigUser makes a request to the getConfig action endpoint of the user resource
func (c *Client) GetConfigUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetConfigUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetConfigUserRequest create the request corresponding to the getConfig action endpoint of the user resource.
func (c *Client) NewGetConfigUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetDefaultShellUserPath computes a request path to the getDefaultShell action of user.
func GetDefaultShellUserPath() string {

	return fmt.Sprintf("/api/v2/user/config/defaultShell")
}

// GetDefaultShellUser makes a request to the getDefaultShell action endpoint of the user resource
func (c *Client) GetDefaultShellUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetDefaultShellUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetDefaultShellUserRequest create the request corresponding to the getDefaultShell action endpoint of the user resource.
func (c *Client) NewGetDefaultShellUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListAuthorizedKeysUserPath computes a request path to the listAuthorizedKeys action of user.
func ListAuthorizedKeysUserPath() string {

	return fmt.Sprintf("/api/v2/user/config/authorizedKeys")
}

// ListAuthorizedKeysUser makes a request to the listAuthorizedKeys action endpoint of the user resource
func (c *Client) ListAuthorizedKeysUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAuthorizedKeysUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAuthorizedKeysUserRequest create the request corresponding to the listAuthorizedKeys action endpoint of the user resource.
func (c *Client) NewListAuthorizedKeysUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RemoveAuthorizedKeysUserPath computes a request path to the removeAuthorizedKeys action of user.
func RemoveAuthorizedKeysUserPath() string {

	return fmt.Sprintf("/api/v2/user/config/authorizedKeys")
}

// RemoveAuthorizedKeysUser makes a request to the removeAuthorizedKeys action endpoint of the user resource
func (c *Client) RemoveAuthorizedKeysUser(ctx context.Context, path string, label string) (*http.Response, error) {
	req, err := c.NewRemoveAuthorizedKeysUserRequest(ctx, path, label)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRemoveAuthorizedKeysUserRequest create the request corresponding to the removeAuthorizedKeys action endpoint of the user resource.
func (c *Client) NewRemoveAuthorizedKeysUserRequest(ctx context.Context, path string, label string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("label", label)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SetAuthorizedKeysUserPayload is the user setAuthorizedKeys action payload.
type SetAuthorizedKeysUserPayload []*UserAuthorizedKey

// SetAuthorizedKeysUserPath computes a request path to the setAuthorizedKeys action of user.
func SetAuthorizedKeysUserPath() string {

	return fmt.Sprintf("/api/v2/user/config/authorizedKeys")
}

// SetAuthorizedKeysUser makes a request to the setAuthorizedKeys action endpoint of the user resource
func (c *Client) SetAuthorizedKeysUser(ctx context.Context, path string, payload SetAuthorizedKeysUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewSetAuthorizedKeysUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSetAuthorizedKeysUserRequest create the request corresponding to the setAuthorizedKeys action endpoint of the user resource.
func (c *Client) NewSetAuthorizedKeysUserRequest(ctx context.Context, path string, payload SetAuthorizedKeysUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SetDefaultShellUserPath computes a request path to the setDefaultShell action of user.
func SetDefaultShellUserPath() string {

	return fmt.Sprintf("/api/v2/user/config/defaultShell")
}

// SetDefaultShellUser makes a request to the setDefaultShell action endpoint of the user resource
func (c *Client) SetDefaultShellUser(ctx context.Context, path string, defaultShell string) (*http.Response, error) {
	req, err := c.NewSetDefaultShellUserRequest(ctx, path, defaultShell)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSetDefaultShellUserRequest create the request corresponding to the setDefaultShell action endpoint of the user resource.
func (c *Client) NewSetDefaultShellUserRequest(ctx context.Context, path string, defaultShell string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("defaultShell", defaultShell)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
